{
	"info": {
		"_postman_id": "94bd37f0-5b83-462e-a73c-fb95de2021fc",
		"name": "API-OnlineStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19874365"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"user1\",\r\n    \"password\":\"123456\",\r\n    \"confirm_password\":\"123456\",\r\n    \"email\":\"user1@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/public/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"public",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract the token from the response and save it to a variable",
									"var token = pm.response.json().data.token;",
									"pm.globals.set(\"access_token\", token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"user1\",\r\n    \"password\":\"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/public/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"public",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get Products By Category ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/products?category=5",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Store Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Meja Lipat\",\r\n  \"description\": \"This is an example product description.\",\r\n  \"price\": 100000,\r\n  \"category_id\": 5\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/products",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Store Category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"glasses\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/categories",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, created_at, and updated_at\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.id).to.exist;\r",
									"        pm.expect(item.name).to.exist;\r",
									"        pm.expect(item.created_at).to.exist;\r",
									"        pm.expect(item.updated_at).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(category) {\r",
									"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"drink\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/categories",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, created_at, and updated_at\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.id).to.exist;\r",
									"        pm.expect(item.name).to.exist;\r",
									"        pm.expect(item.created_at).to.exist;\r",
									"        pm.expect(item.updated_at).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(category) {\r",
									"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"drink\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Items to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, created_at, and updated_at\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.id).to.exist;\r",
									"        pm.expect(item.name).to.exist;\r",
									"        pm.expect(item.created_at).to.exist;\r",
									"        pm.expect(item.updated_at).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(category) {\r",
									"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\":5,\r\n    \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete items from cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, created_at, and updated_at\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.id).to.exist;\r",
									"        pm.expect(item.name).to.exist;\r",
									"        pm.expect(item.created_at).to.exist;\r",
									"        pm.expect(item.updated_at).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(category) {\r",
									"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\":2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/api/protected/carts",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"carts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "Checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - id, name, created_at, and updated_at\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    responseData.data.forEach(function(item) {\r",
									"        pm.expect(item.id).to.exist;\r",
									"        pm.expect(item.name).to.exist;\r",
									"        pm.expect(item.created_at).to.exist;\r",
									"        pm.expect(item.updated_at).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.be.an('array');\r",
									"    \r",
									"    responseData.data.forEach(function(category) {\r",
									"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/v1/api/protected/checkout",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"api",
								"protected",
								"checkout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}